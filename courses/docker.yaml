module:
  name: docker-practice-course
  title: Docker Practice
  description: Practical Docker Tasks
  db_name: docker
  courses:
  - course_id: docker-daemon
    title: Working with Docker Daemon
    time: 15 minutes
    steps:
    - title: Welcome
      task: |-
        ## Let us know who you are.

        Please open "**User**" Tab and fill required information
      verify: |-
        [ -f /opt/.user ]
    - title: Docker Daemon settings overview
      task: |-
        Inspect Docker Configuration and answer the questions below.

        >>Q1: How many containers are there (in all states)?<<
        === 0

        >>Q2: What default Storage Driver?<<
        === overlay

        >>Q3: What default Runtime?<<
        === runc

        >>Q4: What Docker Root Dir?<<
        === /var/lib/docker

        >>Q5: What default Cgroup Driver?<<
        === systemd

        ## Documentation:
        - https://docs.docker.com/config/daemon/
      foreground: |-
        clear && echo -n "Prepairing Environment " && while $(docker image ls | egrep '(gcr.io|weaveworks|quay.io|prom|katacoda)' >/dev/null 2>&1); do echo -n .; sleep 1; done; echo; history -c
    - title: Docker Daemon settings setup
      task: |-
        Change Storage Driver docker daemon settings from `overlay` to `overlay2`

        ## Documentation:
        - https://docs.docker.com/config/daemon/
      verify: |-
        [[ $(docker info 2>&1 | grep "Storage Driver" | cut -d' ' -f3) == 'overlay2' ]]
    intro: |-
      # In this section you will do following:

      - explore Docker Daemon settings
      - change Docker Daemon settings

      # Good Luck!
    finish: |-
      # It's Done!

      Some useful commands to know:

      <pre class="file">

      docker version
      docker info

      cat /etc/docker/daemon.json

      </pre>
    environment:
      hideintro: false
      showdashboards: true
      uilayout: terminal-iframe
      imageid: kubernetes
      dashboards:
        - name: User
          port: 8080
  - course_id: docker-images
    title: Working with Docker Images
    time: 45 minutes
    steps:
    - title: Welcome
      task: |-
        ## Let us know who you are.

        Please open "**User**" Tab and fill required information
      verify: |-
        [ -f /opt/.user ]
    - title: Working with images
      task: |-
        Inspect docker images and answer the questions below.  

        >>Q1: How many images are on the host?<<
        === 9

        >>Q2: What is the "python" image size?<<
        =~= 74

        >>Q3: What is the base image of ruby?<<
        =~= alpine


        Pull the **busybox** image.

        >>Q4: What is the busybox image size?<<
        =~= 1.

        Inspect **_existing_** **busybox** and **ruby** images.

        >>Q5: What is the busybox image Architecture?<<
        =~= amd64

        >>Q6: What is the value of "GEM_HOME" env variable of ruby image?<<
        =~= /usr/local/bundle

        Remove **node** image.
      foreground: |-
        clear && echo -n "Prepairing Environment " && while $(docker image ls | egrep '(gcr.io|weaveworks|quay.io|prom|katacoda)' >/dev/null 2>&1); do echo -n .; sleep 1; done; echo; history -c
    - title: Image building
      task: |-
        Create Dockerfile and build image.

        ## Requirements:
        - image name: **myweb**
        - tag: **0.1**
        - base image: **centos**
        - label: `author=student`
        - **httpd** webserver should be installed
        - **index.html** default httpd page should contain your **"Name Lastname"**
        - port **80** should be exposed

        To check your image try to execute:  
        `docker run -dt -p 32000:80 myweb:0.1`

        Then go to **Checking** tab. You should see your **"Name Lastname"**  
        (or curl **32000** port of **localhost**)
      verify: |-
        $(curl -Ls 127.0.0.1:32000 >/dev/null 2>&1)
    - title: Tag changing
      task: |-
        You have your own **myweb:0.1** image but you have to change the tag.  

        ## Requirements:
        - change docker image tag:
          - from: **myweb:0.1**
          - to: **(first letter of name + Lastname)/httpd:1.0** (etc. sbeliakou/httpd:1.0)  

        Inspect docker images, you should see image with new tag.  

        Let's run the new image:  
        - stop **myweb:0.1** container: `docker stop $(docker ps -lq)`
        - inspect **Checking** tab, you should see katakoda's connecting page 
        - run the new image: `docker run -dt -p 32000:80 sbeliakou/httpd:1.0`
        - inspect **Checking** tab again, now you should see your **"Name Lastname"**
      verify: |-
        $(docker image ls | grep "/httpd.*1.0" >/dev/null 2>&1)
    intro: |-
      # In this section you will do following:

      - get, inspect, remove existing docker images
      - pull new images
      - build your own docker images
      - tag docker images
      - push your images in docker repository

      # Good Luck!
    finish: |-
      # It's Done!

      Some useful commands to know:

      <pre class="file">

      docker image ls
      docker image rm

      docker build [-t image_tag] [-f ./path/to/dockerfile] .
      docker build --build-arg BASE_IMAGE=ubuntu:16.04 .

      docker tag <<id|tag>> <<new_tag>>

      docker pull ubuntu
      docker push myweb/1.0

      </pre>
    environment:
      hideintro: false
      showdashboards: true
      uilayout: terminal-iframe
      imageid: kubernetes
      dashboards:
      - name: User
        port: 8080
      - name: Checking
        port: 32000
  - course_id: docker-containers
    title: Working with Docker Containers
    time: 45 minutes
    steps:
    - title: Welcome
      task: |-
        ## Let us know who you are.

        Please open "**User**" Tab and fill required information
      verify: |-
        [ -f /opt/.user ]
    - title: Working with
      task: |-
        task
      foreground: |-
        clear && echo -n "Prepairing Environment " && while $(docker image ls | egrep '(gcr.io|weaveworks|quay.io|prom|katacoda)' >/dev/null 2>&1); do echo -n .; sleep 1; done; echo; history -c
    intro: |-
      # In this section you will do following:

      - FILL!!!!

      # Good Luck!
    finish: |-
      # It's Done!

      Some useful commands to know:

      <pre class="file">

      FILL!!!!

      </pre>
    environment:
      hideintro: false
      showdashboards: true
      uilayout: terminal-iframe
      imageid: kubernetes
      dashboards:
        - name: User
          port: 8080
  - course_id: docker-volumes
    title: Working with Docker Volumes
    time: 45 minutes
    steps:
    - title: Welcome
      task: |-
        ## Let us know who you are.

        Please open "**User**" Tab and fill required information
      verify: |-
        [ -f /opt/.user ]
    - title: Working with
      task: |-
        task
      foreground: |-
        clear && echo -n "Prepairing Environment " && while $(docker image ls | egrep '(gcr.io|weaveworks|quay.io|prom|katacoda)' >/dev/null 2>&1); do echo -n .; sleep 1; done; echo; history -c
    intro: |-
      # In this section you will do following:

      - FILL!!!!

      # Good Luck!
    finish: |-
      # It's Done!

      Some useful commands to know:

      <pre class="file">

      FILL!!!!

      </pre>
    environment:
      hideintro: false
      showdashboards: true
      uilayout: terminal-iframe
      imageid: kubernetes
      dashboards:
        - name: User
          port: 8080
  - course_id: docker-networks
    title: Working with Docker Networks
    time: 45 minutes
    steps:
    - title: Welcome
      task: |-
        ## Let us know who you are.

        Please open "**User**" Tab and fill required information
      verify: |-
        [ -f /opt/.user ]
    - title: Working with
      task: |-
        task
      foreground: |-
        clear && echo -n "Prepairing Environment " && while $(docker image ls | egrep '(gcr.io|weaveworks|quay.io|prom|katacoda)' >/dev/null 2>&1); do echo -n .; sleep 1; done; echo; history -c
    intro: |-
      # In this section you will do following:

      - FILL!!!!

      # Good Luck!
    finish: |-
      # It's Done!

      Some useful commands to know:

      <pre class="file">

      FILL!!!!

      </pre>
    environment:
      hideintro: false
      showdashboards: true
      uilayout: terminal-iframe
      imageid: kubernetes
      dashboards:
        - name: User
          port: 8080
  - course_id: docker-cgroups
    title: Working with CGroups
    time: 45 minutes
    steps:
    - title: Welcome
      task: |-
        ## Let us know who you are.

        Please open "**User**" Tab and fill required information
      verify: |-
        [ -f /opt/.user ]
    - title: Working with
      task: |-
        task
      foreground: |-
        clear && echo -n "Prepairing Environment " && while $(docker image ls | egrep '(gcr.io|weaveworks|quay.io|prom|katacoda)' >/dev/null 2>&1); do echo -n .; sleep 1; done; echo; history -c
    intro: |-
      # In this section you will do following:

      - FILL!!!!

      # Good Luck!
    finish: |-
      # It's Done!

      Some useful commands to know:

      <pre class="file">

      FILL!!!!

      </pre>
    environment:
      hideintro: false
      showdashboards: true
      uilayout: terminal-iframe
      imageid: kubernetes
      dashboards:
        - name: User
          port: 8080
  - course_id: docker-ns
    title: Working with Docker Namespaces
    time: 45 minutes
    steps:
    - title: Welcome
      task: |-
        ## Let us know who you are.

        Please open "**User**" Tab and fill required information
      verify: |-
        [ -f /opt/.user ]
    - title: Working with
      task: |-
        task
      foreground: |-
        clear && echo -n "Prepairing Environment " && while $(docker image ls | egrep '(gcr.io|weaveworks|quay.io|prom|katacoda)' >/dev/null 2>&1); do echo -n .; sleep 1; done; echo; history -c
    intro: |-
      # In this section you will do following:

      - FILL!!!!

      # Good Luck!
    finish: |-
      # It's Done!

      Some useful commands to know:

      <pre class="file">

      FILL!!!!

      </pre>
    environment:
      hideintro: false
      showdashboards: true
      uilayout: terminal-iframe
      imageid: kubernetes
      dashboards:
        - name: User
          port: 8080
  - course_id: docker-compose
    title: Working with Docker Compose
    time: 45 minutes
    steps:
    - title: Welcome
      task: |-
        ## Let us know who you are.

        Please open "**User**" Tab and fill required information
      verify: |-
        [ -f /opt/.user ]
    - title: Working with
      task: |-
        task
      foreground: |-
        clear && echo -n "Prepairing Environment " && while $(docker image ls | egrep '(gcr.io|weaveworks|quay.io|prom|katacoda)' >/dev/null 2>&1); do echo -n .; sleep 1; done; echo; history -c
    intro: |-
      # In this section you will do following:

      - FILL!!!!

      # Good Luck!
    finish: |-
      # It's Done!

      Some useful commands to know:

      <pre class="file">

      FILL!!!!

      </pre>
    environment:
      hideintro: false
      showdashboards: true
      uilayout: terminal-iframe
      imageid: kubernetes
      dashboards:
        - name: User
          port: 8080

